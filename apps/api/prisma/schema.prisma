// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  totalEquity Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  trades           Trade[]
  equitySnapshots  EquitySnapshot[]
}

model Trade {
  id           String   @id @default(cuid())
  userId       String
  symbol       String   // Limit symbol length
  direction    String   // 'LONG' | 'SHORT'
  entryPrice   Float
  positionSize Float
  stopLoss     Float
  exitPrice    Float?
  status       String   // 'ACTIVE' | 'CLOSED'
  entryDate    DateTime
  exitDate     DateTime?
  realizedPnL      Float?
  riskAmount       Float    // Monetary risk amount
  riskPercentage   Float    // Risk as % of equity at time of entry
  notes            String?  // Allow longer notes
  
  // Alignment Analysis fields
  alignmentScore   Float?   // Overall alignment score (-1 to 1)
  alignmentLevel   String?  // AlignmentLevel: 'STRONG_CONFLICT' | 'WEAK_CONFLICT' | 'NEUTRAL' | 'WEAK_ALIGNMENT' | 'STRONG_ALIGNMENT'
  alignmentWarnings String? // JSON string of warning messages
  alignmentConfirmations String? // JSON string of confirmation messages
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  methodAnalysis MethodAnalysis[]
  mindsetTags    MindsetTag[]
  tradeGrade     TradeGrade?
  gradeHistory   GradeHistory[]
  
  // Indexes for performance
  @@index([userId, status])
  @@index([userId, createdAt])
}

model MethodAnalysis {
  id        String   @id @default(cuid())
  tradeId   String
  timeframe String   // TimeframeType: 'DAILY' | 'WEEKLY' | 'MONTHLY'
  indicator String   // IndicatorType: 'MACD', 'RSI', etc.
  signal    String   // SignalType: 'BUY_SIGNAL', 'SELL_SIGNAL', etc.
  divergence String  @default("NONE") // DivergenceType: 'BULLISH' | 'BEARISH' | 'NONE'
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  trade Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@unique([tradeId, timeframe])
  @@index([tradeId])
  @@index([indicator])
  @@index([signal])
}

model MindsetTag {
  id        String   @id @default(cuid())
  tradeId   String
  tag       String   // MindsetTagType as string
  intensity String   @default("MEDIUM") // IntensityLevel as string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  trade Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@unique([tradeId, tag])
  @@index([tradeId])
  @@index([tag])
}

model EquitySnapshot {
  id          String   @id @default(cuid())
  userId      String
  totalEquity Float
  timestamp   DateTime @default(now())
  source      String   // 'TRADE_CLOSE' | 'MANUAL_UPDATE' | 'DAILY_SNAPSHOT' | 'CASH_DEPOSIT' | 'CASH_WITHDRAWAL'
  amount      Float?   // Amount of the adjustment (positive for deposits, negative for withdrawals, null for snapshots)
  description String?  // User-provided description for manual adjustments
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
  @@index([userId, source])
}

model TradeGrade {
  id           String   @id @default(cuid())
  tradeId      String   @unique
  overall      String   // GradeLevel: 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D', 'F'
  score        Float    // 0-100
  riskScore    Float    // Risk management component score
  alignmentScore Float  // Method alignment component score
  mindsetScore Float    // Mindset quality component score
  executionScore Float  // Execution component score
  explanation  String   // JSON array of explanation strings
  recommendations String // JSON array of improvement suggestions
  calculatedAt DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  trade Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@index([overall])
  @@index([score])
  @@index([calculatedAt])
}

model GradeHistory {
  id           String   @id @default(cuid())
  tradeId      String
  grade        String   // GradeLevel as string
  score        Float    // 0-100
  reason       String   // 'TRADE_CLOSE' | 'ANALYSIS_UPDATE' | 'MINDSET_UPDATE' | 'MANUAL_RECALC'
  calculatedAt DateTime @default(now())
  
  trade Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@index([tradeId, calculatedAt])
  @@index([grade])
  @@index([calculatedAt])
}

